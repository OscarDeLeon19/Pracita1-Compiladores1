package analisis.sintactico;

import java_cup.runtime.Symbol;
import analisis.lexico.AnalizadorLexico;
import errores.TablaDeErrores;

parser code
{:

    public parser(AnalizadorLexico lexer) {
            super(lexer);
    }
    public void syntax_error(Symbol s) {
            tabla.agregarError(String.valueOf(s.value), s.left, s.right, "Sintactico", "Error de Sintaxis, se esperaba otro token");
        }

    private TablaDeErrores tabla = new TablaDeErrores();

    public void setTabla(TablaDeErrores tabla){
            this.tabla = tabla;
    }

:};

terminal CADENA, SUMA, RESTA, MULTIPLICACION, DIVISION, PARENTESIS_A, PARENTESIS_C, DOS_PUNTOS, PUNTO_COMA,
    LLAVE_A, LLAVE_C, CORCHETE_A, CORCHETE_C, COMA, SIGNO_IGUAL, DEF, BARRAS, PIE, TITULO, EJEX, EJEY, ETIQUETAS, VALORES,
    UNIR, TIPO, CANTIDAD, PORCENTAJE, TOTAL, EXTRA, EJECUTAR, ERROR;
terminal Double ENTERO, DECIMAL;

non terminal s, s1, s2, s3, s4,s5, s6, s7, s8, s9, s10, s11, s13;
non terminal Double expresion, s12;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

start with s;

s ::=
    DEF s1 s
    | DEF s2 s
    | s13
    | // epsilon
    | error PUNTO_COMA
    | error LLAVE_C
;

s1 ::=
    BARRAS LLAVE_A s3 LLAVE_C
;

s2 ::=
    PIE LLAVE_A s10 LLAVE_C
;

s3 ::=
    TITULO DOS_PUNTOS CADENA PUNTO_COMA s3
    | EJEX DOS_PUNTOS CORCHETE_A s4 CORCHETE_C PUNTO_COMA s3
    | EJEY DOS_PUNTOS CORCHETE_A s6 CORCHETE_C PUNTO_COMA s3
    | UNIR DOS_PUNTOS CORCHETE_A s8 CORCHETE_C PUNTO_COMA s3
    | // epsilon
;

s4 ::=
    CADENA s5
    | CADENA
;

s5 ::=
    COMA s4
;

s6 ::=
    expresion:e s7 {:RESULT = e; System.out.println(("Resultado: " + e));:}
    | expresion:e  {:RESULT = e; System.out.println(("Resultado: " + e));:}
;

s7 ::=
    COMA s6
;

s8 ::=
   LLAVE_A ENTERO COMA ENTERO LLAVE_C s9
   | LLAVE_A ENTERO COMA ENTERO LLAVE_C
;

s9 ::=
    COMA s8
;

s10 ::=
    TITULO DOS_PUNTOS CADENA PUNTO_COMA s10
    | TIPO DOS_PUNTOS s11 PUNTO_COMA s10
   	| ETIQUETAS DOS_PUNTOS CORCHETE_A s4 CORCHETE_C PUNTO_COMA s10
    | VALORES DOS_PUNTOS CORCHETE_A s6 CORCHETE_C PUNTO_COMA s10
   	| TOTAL DOS_PUNTOS expresion:e PUNTO_COMA s10 {:RESULT = e; System.out.println(("Resultado: " + e));:}
    | UNIR DOS_PUNTOS CORCHETE_A s8 CORCHETE_C PUNTO_COMA s10
    | EXTRA DOS_PUNTOS CADENA PUNTO_COMA s10
    | // epsilon
;

s11 ::=
    CANTIDAD
    | PORCENTAJE
;

s12 ::=
    ENTERO:n {:RESULT = n;:}
    | DECIMAL:d {:RESULT = d;:}
;

s13 ::=
    EJECUTAR PARENTESIS_A CADENA PARENTESIS_C PUNTO_COMA
;

expresion ::=
           s12:n {: RESULT = n; :}
        | expresion:e1 SUMA expresion:e2
                    {: RESULT = e1 + e2; :}
        | expresion:e1 RESTA expresion:e2
                    {: RESULT = e1 - e2; :}
        | expresion:e1 MULTIPLICACION expresion:e2
                    {: RESULT = e1 * e2; :}
        | expresion:e1 DIVISION expresion:e2
                    {: RESULT = e1 / e2; :}
        | RESTA expresion:e
                    {:RESULT = 0 - e;:}
        | PARENTESIS_A expresion:e PARENTESIS_C
                    {:RESULT = e;:}
;