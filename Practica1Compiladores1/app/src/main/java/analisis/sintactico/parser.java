
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis.sintactico;

import analisis.lexico.AnalizadorLexico;
import errores.TablaDeErrores;
import java_cup.runtime.Symbol;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\003\000\002\002\002\000\002\002\004" +
    "\000\002\002\004\000\002\003\006\000\002\004\006\000" +
    "\002\005\007\000\002\005\011\000\002\005\011\000\002" +
    "\005\011\000\002\005\002\000\002\006\004\000\002\006" +
    "\003\000\002\007\004\000\002\010\004\000\002\010\003" +
    "\000\002\011\004\000\002\012\010\000\002\012\007\000" +
    "\002\013\004\000\002\014\007\000\002\014\007\000\002" +
    "\014\011\000\002\014\011\000\002\014\007\000\002\014" +
    "\011\000\002\014\007\000\002\014\002\000\002\015\003" +
    "\000\002\015\003\000\002\020\003\000\002\020\003\000" +
    "\002\016\007\000\002\017\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\012\002\ufffd\003\004\023\006\041\010\001" +
    "\002\000\006\014\177\016\200\001\002\000\004\002\ufffe" +
    "\001\002\000\006\024\020\025\021\001\002\000\004\002" +
    "\015\001\002\000\004\011\011\001\002\000\004\004\012" +
    "\001\002\000\004\012\013\001\002\000\004\014\014\001" +
    "\002\000\004\002\uffde\001\002\000\004\002\001\001\002" +
    "\000\012\002\ufffd\003\004\023\006\041\010\001\002\000" +
    "\012\002\ufffd\003\004\023\006\041\010\001\002\000\004" +
    "\015\140\001\002\000\004\015\022\001\002\000\022\016" +
    "\uffe3\026\024\031\030\032\026\033\025\034\032\037\027" +
    "\040\023\001\002\000\004\013\134\001\002\000\004\013" +
    "\130\001\002\000\004\013\112\001\002\000\004\013\100" +
    "\001\002\000\004\013\054\001\002\000\004\013\042\001" +
    "\002\000\004\016\041\001\002\000\004\013\033\001\002" +
    "\000\006\035\034\036\035\001\002\000\004\014\uffe2\001" +
    "\002\000\004\014\uffe1\001\002\000\004\014\037\001\002" +
    "\000\022\016\uffe3\026\024\031\030\032\026\033\025\034" +
    "\032\037\027\040\023\001\002\000\004\016\uffe9\001\002" +
    "\000\012\002\ufff9\003\ufff9\023\ufff9\041\ufff9\001\002\000" +
    "\004\017\043\001\002\000\004\004\045\001\002\000\004" +
    "\020\051\001\002\000\006\020\ufff2\021\047\001\002\000" +
    "\004\020\ufff3\001\002\000\004\004\045\001\002\000\004" +
    "\020\ufff1\001\002\000\004\014\052\001\002\000\022\016" +
    "\uffe3\026\024\031\030\032\026\033\025\034\032\037\027" +
    "\040\023\001\002\000\004\016\uffe8\001\002\000\012\006" +
    "\055\011\057\043\061\044\060\001\002\000\012\006\055" +
    "\011\057\043\061\044\060\001\002\000\022\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\012\uffdd\014\uffdd\020\uffdd\021\uffdd" +
    "\001\002\000\012\006\055\011\057\043\061\044\060\001" +
    "\002\000\022\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf" +
    "\014\uffdf\020\uffdf\021\uffdf\001\002\000\022\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\012\uffe0\014\uffe0\020\uffe0\021\uffe0" +
    "\001\002\000\014\005\066\006\064\007\063\010\067\014" +
    "\065\001\002\000\012\006\055\011\057\043\061\044\060" +
    "\001\002\000\012\006\055\011\057\043\061\044\060\001" +
    "\002\000\022\016\uffe3\026\024\031\030\032\026\033\025" +
    "\034\032\037\027\040\023\001\002\000\012\006\055\011" +
    "\057\043\061\044\060\001\002\000\012\006\055\011\057" +
    "\043\061\044\060\001\002\000\022\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\012\uffd9\014\uffd9\020\uffd9\021\uffd9\001\002" +
    "\000\022\005\uffdc\006\uffdc\007\063\010\067\012\uffdc\014" +
    "\uffdc\020\uffdc\021\uffdc\001\002\000\004\016\uffe6\001\002" +
    "\000\022\005\uffdb\006\uffdb\007\063\010\067\012\uffdb\014" +
    "\uffdb\020\uffdb\021\uffdb\001\002\000\022\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\012\uffda\014\uffda\020\uffda\021\uffda\001" +
    "\002\000\014\005\066\006\064\007\063\010\067\012\076" +
    "\001\002\000\022\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012" +
    "\uffd7\014\uffd7\020\uffd7\021\uffd7\001\002\000\022\005\uffd8" +
    "\006\uffd8\007\063\010\067\012\uffd8\014\uffd8\020\uffd8\021" +
    "\uffd8\001\002\000\004\017\101\001\002\000\012\006\055" +
    "\011\057\043\061\044\060\001\002\000\004\020\107\001" +
    "\002\000\016\005\066\006\064\007\063\010\067\020\uffef" +
    "\021\104\001\002\000\012\006\055\011\057\043\061\044" +
    "\060\001\002\000\004\020\ufff0\001\002\000\004\020\uffee" +
    "\001\002\000\004\014\110\001\002\000\022\016\uffe3\026" +
    "\024\031\030\032\026\033\025\034\032\037\027\040\023" +
    "\001\002\000\004\016\uffe7\001\002\000\004\017\113\001" +
    "\002\000\004\015\115\001\002\000\004\020\125\001\002" +
    "\000\004\043\116\001\002\000\004\021\117\001\002\000" +
    "\004\043\120\001\002\000\004\016\121\001\002\000\006" +
    "\020\uffec\021\122\001\002\000\004\015\115\001\002\000" +
    "\004\020\uffed\001\002\000\004\020\uffeb\001\002\000\004" +
    "\014\126\001\002\000\022\016\uffe3\026\024\031\030\032" +
    "\026\033\025\034\032\037\027\040\023\001\002\000\004" +
    "\016\uffe5\001\002\000\004\004\131\001\002\000\004\014" +
    "\132\001\002\000\022\016\uffe3\026\024\031\030\032\026" +
    "\033\025\034\032\037\027\040\023\001\002\000\004\016" +
    "\uffea\001\002\000\004\004\135\001\002\000\004\014\136" +
    "\001\002\000\022\016\uffe3\026\024\031\030\032\026\033" +
    "\025\034\032\037\027\040\023\001\002\000\004\016\uffe4" +
    "\001\002\000\014\016\ufff4\026\141\027\145\030\144\033" +
    "\142\001\002\000\004\013\171\001\002\000\004\013\163" +
    "\001\002\000\004\016\162\001\002\000\004\013\154\001" +
    "\002\000\004\013\146\001\002\000\004\017\147\001\002" +
    "\000\004\004\045\001\002\000\004\020\151\001\002\000" +
    "\004\014\152\001\002\000\014\016\ufff4\026\141\027\145" +
    "\030\144\033\142\001\002\000\004\016\ufff7\001\002\000" +
    "\004\017\155\001\002\000\012\006\055\011\057\043\061" +
    "\044\060\001\002\000\004\020\157\001\002\000\004\014" +
    "\160\001\002\000\014\016\ufff4\026\141\027\145\030\144" +
    "\033\142\001\002\000\004\016\ufff6\001\002\000\012\002" +
    "\ufffa\003\ufffa\023\ufffa\041\ufffa\001\002\000\004\017\164" +
    "\001\002\000\004\015\115\001\002\000\004\020\166\001" +
    "\002\000\004\014\167\001\002\000\014\016\ufff4\026\141" +
    "\027\145\030\144\033\142\001\002\000\004\016\ufff5\001" +
    "\002\000\004\004\172\001\002\000\004\014\173\001\002" +
    "\000\014\016\ufff4\026\141\027\145\030\144\033\142\001" +
    "\002\000\004\016\ufff8\001\002\000\004\002\000\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\002\006\016\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\016\004\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\175\016\004\001\001\000\006\002" +
    "\174\016\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\043" +
    "\001\001\000\002\001\001\000\004\007\045\001\001\000" +
    "\002\001\001\000\004\006\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\052\001\001\000\002\001" +
    "\001\000\006\017\061\020\055\001\001\000\006\017\076" +
    "\020\055\001\001\000\002\001\001\000\006\017\074\020" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\073\020\055\001\001\000\006\017" +
    "\072\020\055\001\001\000\004\014\071\001\001\000\006" +
    "\017\070\020\055\001\001\000\006\017\067\020\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\101\017\102\020\055\001\001\000\002\001\001\000" +
    "\004\011\104\001\001\000\010\010\105\017\102\020\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\122\001\001\000\004\012\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\136\001\001\000\002\001\001\000\004\005\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\155\017\102\020\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public parser(AnalizadorLexico lexer) {
            super(lexer);
    }
    public void syntax_error(Symbol s) {
            tabla.agregarError(String.valueOf(s.value), s.left, s.right, "Sintactico", "Error de Sintaxis, se esperaba otro token");
        }

    private TablaDeErrores tabla = new TablaDeErrores();

    public void setTabla(TablaDeErrores tabla){
            this.tabla = tabla;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= DEF s1 s 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= DEF s2 s 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= s13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s ::= error LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s1 ::= BARRAS LLAVE_A s3 LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s2 ::= PIE LLAVE_A s10 LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s3 ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s3 ::= EJEX DOS_PUNTOS CORCHETE_A s4 CORCHETE_C PUNTO_COMA s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s3 ::= EJEY DOS_PUNTOS CORCHETE_A s6 CORCHETE_C PUNTO_COMA s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s3 ::= UNIR DOS_PUNTOS CORCHETE_A s8 CORCHETE_C PUNTO_COMA s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s4 ::= CADENA s5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s4 ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s5 ::= COMA s4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s6 ::= expresion s7 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e; System.out.println(("Resultado: " + e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s6 ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; System.out.println(("Resultado: " + e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s7 ::= COMA s6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s8 ::= LLAVE_A ENTERO COMA ENTERO LLAVE_C s9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // s8 ::= LLAVE_A ENTERO COMA ENTERO LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // s9 ::= COMA s8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s10 ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s10 ::= TIPO DOS_PUNTOS s11 PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s10 ::= ETIQUETAS DOS_PUNTOS CORCHETE_A s4 CORCHETE_C PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s10 ::= VALORES DOS_PUNTOS CORCHETE_A s6 CORCHETE_C PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s10 ::= TOTAL DOS_PUNTOS expresion PUNTO_COMA s10 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = e; System.out.println(("Resultado: " + e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s10 ::= UNIR DOS_PUNTOS CORCHETE_A s8 CORCHETE_C PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // s10 ::= EXTRA DOS_PUNTOS CADENA PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s10 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s11 ::= CANTIDAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s11 ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s12 ::= ENTERO 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s12 ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s13 ::= EJECUTAR PARENTESIS_A CADENA PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s13",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= s12 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion SUMA expresion 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion RESTA expresion 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion DIVISION expresion 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= RESTA expresion 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = 0 - e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= PARENTESIS_A expresion PARENTESIS_C 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
