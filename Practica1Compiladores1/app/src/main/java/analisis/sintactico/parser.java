
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis.sintactico;

import java_cup.runtime.Symbol;
import analisis.lexico.AnalizadorLexico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\003\006\000\002\004\006\000\002\005\007\000" +
    "\002\005\011\000\002\005\011\000\002\005\011\000\002" +
    "\005\002\000\002\006\004\000\002\006\003\000\002\007" +
    "\004\000\002\010\004\000\002\010\003\000\002\011\004" +
    "\000\002\012\010\000\002\012\007\000\002\013\004\000" +
    "\002\014\007\000\002\014\006\000\002\014\011\000\002" +
    "\014\011\000\002\014\007\000\002\014\011\000\002\014" +
    "\007\000\002\014\002\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\007\000" +
    "\002\020\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\002\000\002\022\004\000\002\023\005\000\002\023" +
    "\005\000\002\023\002\000\002\024\004\000\002\024\003" +
    "\000\002\025\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\010\003\004\025\006\043\010\001\002\000" +
    "\006\016\205\020\206\001\002\000\004\002\ufffe\001\002" +
    "\000\006\026\020\027\021\001\002\000\004\002\015\001" +
    "\002\000\004\013\011\001\002\000\004\004\012\001\002" +
    "\000\004\014\013\001\002\000\004\016\014\001\002\000" +
    "\004\002\uffdf\001\002\000\004\002\001\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002\000\004\017" +
    "\150\001\002\000\004\017\022\001\002\000\022\020\uffe4" +
    "\030\024\033\030\034\026\035\025\036\032\041\027\042" +
    "\023\001\002\000\004\015\144\001\002\000\004\015\140" +
    "\001\002\000\004\015\122\001\002\000\004\015\110\001" +
    "\002\000\004\015\053\001\002\000\004\015\041\001\002" +
    "\000\004\020\040\001\002\000\006\037\033\040\034\001" +
    "\002\000\004\016\uffe3\001\002\000\004\016\uffe2\001\002" +
    "\000\004\016\036\001\002\000\022\020\uffe4\030\024\033" +
    "\030\034\026\035\025\036\032\041\027\042\023\001\002" +
    "\000\004\020\uffea\001\002\000\004\002\ufffa\001\002\000" +
    "\004\021\042\001\002\000\004\004\044\001\002\000\004" +
    "\022\050\001\002\000\006\022\ufff3\023\045\001\002\000" +
    "\004\004\044\001\002\000\004\022\ufff4\001\002\000\004" +
    "\022\ufff2\001\002\000\004\016\051\001\002\000\022\020" +
    "\uffe4\030\024\033\030\034\026\035\025\036\032\041\027" +
    "\042\023\001\002\000\004\020\uffe9\001\002\000\012\005" +
    "\057\006\054\010\063\013\062\001\002\000\022\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\014\uffe0\016\uffe0\022\uffe0\023" +
    "\uffe0\001\002\000\022\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\014\uffd5\016\uffd5\022\uffd5\023\uffd5\001\002\000\022\007" +
    "\uffd7\010\uffd7\011\101\012\103\014\uffd7\016\uffd7\022\uffd7" +
    "\023\uffd7\001\002\000\022\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\014\uffe1\016\uffe1\022\uffe1\023\uffe1\001\002\000\004" +
    "\016\077\001\002\000\022\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\014\uffd4\016\uffd4\022\uffd4\023\uffd4\001\002\000\012" +
    "\005\057\006\054\010\063\013\062\001\002\000\010\005" +
    "\057\006\054\013\062\001\002\000\016\007\067\010\065" +
    "\014\uffdb\016\uffdb\022\uffdb\023\uffdb\001\002\000\012\005" +
    "\057\006\054\010\063\013\062\001\002\000\012\014\uffde" +
    "\016\uffde\022\uffde\023\uffde\001\002\000\012\005\057\006" +
    "\054\010\063\013\062\001\002\000\016\007\067\010\065" +
    "\014\uffdb\016\uffdb\022\uffdb\023\uffdb\001\002\000\012\014" +
    "\uffdd\016\uffdd\022\uffdd\023\uffdd\001\002\000\016\007\067" +
    "\010\065\014\uffdb\016\uffdb\022\uffdb\023\uffdb\001\002\000" +
    "\012\014\uffdc\016\uffdc\022\uffdc\023\uffdc\001\002\000\022" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\016\uffd6\022" +
    "\uffd6\023\uffd6\001\002\000\004\014\076\001\002\000\022" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3\016\uffd3\022" +
    "\uffd3\023\uffd3\001\002\000\022\020\uffe4\030\024\033\030" +
    "\034\026\035\025\036\032\041\027\042\023\001\002\000" +
    "\004\020\uffe7\001\002\000\012\005\057\006\054\010\063" +
    "\013\062\001\002\000\016\007\uffda\010\uffda\014\uffda\016" +
    "\uffda\022\uffda\023\uffda\001\002\000\012\005\057\006\054" +
    "\010\063\013\062\001\002\000\022\007\uffd7\010\uffd7\011" +
    "\101\012\103\014\uffd7\016\uffd7\022\uffd7\023\uffd7\001\002" +
    "\000\016\007\uffd8\010\uffd8\014\uffd8\016\uffd8\022\uffd8\023" +
    "\uffd8\001\002\000\022\007\uffd7\010\uffd7\011\101\012\103" +
    "\014\uffd7\016\uffd7\022\uffd7\023\uffd7\001\002\000\016\007" +
    "\uffd9\010\uffd9\014\uffd9\016\uffd9\022\uffd9\023\uffd9\001\002" +
    "\000\004\021\111\001\002\000\012\005\057\006\054\010" +
    "\063\013\062\001\002\000\006\022\ufff0\023\117\001\002" +
    "\000\004\022\114\001\002\000\004\016\115\001\002\000" +
    "\022\020\uffe4\030\024\033\030\034\026\035\025\036\032" +
    "\041\027\042\023\001\002\000\004\020\uffe8\001\002\000" +
    "\012\005\057\006\054\010\063\013\062\001\002\000\004" +
    "\022\ufff1\001\002\000\004\022\uffef\001\002\000\004\021" +
    "\123\001\002\000\004\017\125\001\002\000\004\022\135" +
    "\001\002\000\004\005\126\001\002\000\004\023\127\001" +
    "\002\000\004\005\130\001\002\000\004\020\131\001\002" +
    "\000\006\022\uffed\023\132\001\002\000\004\017\125\001" +
    "\002\000\004\022\uffee\001\002\000\004\022\uffec\001\002" +
    "\000\004\016\136\001\002\000\022\020\uffe4\030\024\033" +
    "\030\034\026\035\025\036\032\041\027\042\023\001\002" +
    "\000\004\020\uffe6\001\002\000\004\004\141\001\002\000" +
    "\004\016\142\001\002\000\022\020\uffe4\030\024\033\030" +
    "\034\026\035\025\036\032\041\027\042\023\001\002\000" +
    "\004\020\uffeb\001\002\000\004\004\145\001\002\000\004" +
    "\016\146\001\002\000\022\020\uffe4\030\024\033\030\034" +
    "\026\035\025\036\032\041\027\042\023\001\002\000\004" +
    "\020\uffe5\001\002\000\014\020\ufff5\030\151\031\155\032" +
    "\154\035\152\001\002\000\004\015\201\001\002\000\004" +
    "\015\173\001\002\000\004\020\172\001\002\000\004\015" +
    "\164\001\002\000\004\015\156\001\002\000\004\021\157" +
    "\001\002\000\004\004\044\001\002\000\004\022\161\001" +
    "\002\000\004\016\162\001\002\000\014\020\ufff5\030\151" +
    "\031\155\032\154\035\152\001\002\000\004\020\ufff8\001" +
    "\002\000\004\021\165\001\002\000\012\005\057\006\054" +
    "\010\063\013\062\001\002\000\004\022\167\001\002\000" +
    "\004\016\170\001\002\000\014\020\ufff5\030\151\031\155" +
    "\032\154\035\152\001\002\000\004\020\ufff7\001\002\000" +
    "\004\002\ufffb\001\002\000\004\021\174\001\002\000\004" +
    "\017\125\001\002\000\004\022\176\001\002\000\004\016" +
    "\177\001\002\000\014\020\ufff5\030\151\031\155\032\154" +
    "\035\152\001\002\000\004\020\ufff6\001\002\000\004\004" +
    "\202\001\002\000\004\016\203\001\002\000\014\020\ufff5" +
    "\030\151\031\155\032\154\035\152\001\002\000\004\020" +
    "\ufff9\001\002\000\004\002\ufffd\001\002\000\004\002\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\002\006\017\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\016\004\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\042\001\001\000\002\001\001\000\004\007\045\001\001" +
    "\000\004\006\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\051\001\001\000\002" +
    "\001\001\000\014\016\060\020\057\022\063\024\055\025" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\060\020\074\022\063\024\055" +
    "\025\054\001\001\000\006\016\060\025\073\001\001\000" +
    "\004\021\065\001\001\000\012\016\060\022\071\024\055" +
    "\025\054\001\001\000\002\001\001\000\012\016\060\022" +
    "\067\024\055\025\054\001\001\000\004\021\070\001\001" +
    "\000\002\001\001\000\004\021\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\077\001\001\000\002\001\001\000\010\016" +
    "\060\024\105\025\054\001\001\000\002\001\001\000\010" +
    "\016\060\024\103\025\054\001\001\000\004\023\104\001" +
    "\001\000\002\001\001\000\004\023\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\112\016\060\020" +
    "\111\022\063\024\055\025\054\001\001\000\004\011\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\115\001\001\000\002\001\001\000\016\010\120\016\060" +
    "\020\111\022\063\024\055\025\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\132" +
    "\001\001\000\004\012\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\146\001\001\000\002\001" +
    "\001\000\004\005\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\165\016\060" +
    "\020\111\022\063\024\055\025\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public parser(AnalizadorLexico lexer) {
            super(lexer);
    }
    public void syntax_error(Symbol s) {
            System.out.println("Error: " + s.value + " Linea: " + s.left + " Columna: " + s.right);
        }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= DEF s1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= DEF s2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= s13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= error LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s1 ::= BARRAS LLAVE_A s3 LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s2 ::= PIE LLAVE_A s10 LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s3 ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s3 ::= EJEX DOS_PUNTOS CORCHETE_A s4 CORCHETE_C PUNTO_COMA s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s3 ::= EJEY DOS_PUNTOS CORCHETE_A s6 CORCHETE_C PUNTO_COMA s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s3 ::= UNIR DOS_PUNTOS CORCHETE_A s8 CORCHETE_C PUNTO_COMA s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s4 ::= CADENA s5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s4 ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s5 ::= COMA s4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s6 ::= expresion s7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s6 ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s7 ::= COMA s6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s8 ::= LLAVE_A ENTERO COMA ENTERO LLAVE_C s9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s8 ::= LLAVE_A ENTERO COMA ENTERO LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // s9 ::= COMA s8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // s10 ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s10 ::= TIPO s11 PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s10 ::= ETIQUETAS DOS_PUNTOS CORCHETE_A s4 CORCHETE_C PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s10 ::= VALORES DOS_PUNTOS CORCHETE_A s6 CORCHETE_C PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s10 ::= TOTAL DOS_PUNTOS expresion PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s10 ::= UNIR DOS_PUNTOS CORCHETE_A s8 CORCHETE_C PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s10 ::= EXTRA DOS_PUNTOS CADENA PUNTO_COMA s10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // s10 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s11 ::= CANTIDAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s11 ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s12 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s12 ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s13 ::= EJECUTAR PARENTESIS_A CADENA PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s13",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= t x_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // x_prima ::= SUMA t x_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x_prima",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // x_prima ::= RESTA t x_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x_prima",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // x_prima ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x_prima",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // t ::= p t_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // t_prima ::= MULTIPLICACION p t_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // t_prima ::= DIVISION p t_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // t_prima ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // p ::= RESTA p_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // p ::= p_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // p_prima ::= s12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_prima",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // p_prima ::= PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_prima",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
